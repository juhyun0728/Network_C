#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <sys/time.h>
#include <sys/stat.h>
#include <netinet/in.h>
#include <netdb.h>
#include <arpa/inet.h>
#include <ctype.h>
#include <errno.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define PROMPT() {printf("\n> ");fflush(stdout);}
#define GETCMD "wget"
#define QUITCMD "quit"

int FindStatus(int sock){
    char buff[1024]="",*ptr=buff+1;
    int bytesread, status;
    while(bytesread = recv(sock, ptr, 1, 0)){
        if(bytesread==-1){
            perror("FindStatus");
            exit(1);
        }
        if((ptr[-1]=='\r')  && (*ptr=='\n' )) break;
        ptr++;
    }
    *ptr=0;
    ptr=buff+1;

    sscanf(ptr,"%*s %d ", &status);

		char* temp = strtok(ptr, " ");
		char* stat = strtok(NULL, " ");
		char* stat_message = strtok(NULL, "\n");
		if(status != 200){
			printf("%d %s\n", status, stat_message);
			return 0;
		}
    return (bytesread>0)?status:0;

}

int GetContentLength(int sock){
    char buff[1024]="",*ptr=buff+4;
    int bytesread, status;
    while(bytesread = recv(sock, ptr, 1, 0)){
        if(bytesread==-1){
            perror("GetContentLength");
            exit(1);
        }
        if(
            (ptr[-3]=='\r')  && (ptr[-2]=='\n' ) &&
            (ptr[-1]=='\r')  && (*ptr=='\n' )
        ) break;
        ptr++;
    }
    *ptr=0;
    ptr=buff+4;

    if(bytesread){
        ptr=strstr(ptr,"Content-Length:");
        if(ptr){
            sscanf(ptr,"%*s %d",&bytesread);
        }else
            bytesread=-1;

       printf("Total size %d bytes\n",bytesread);
    }
    return  bytesread ;
}

int main(int argc, char *argv[]) {
	int socktoserver = -1;
	char buf[BUFSIZ];

	char fname[BUFSIZ];

	printf("Student ID : 20141733\n");
	printf("Name : Juhyeon Cho\n");

	PROMPT();

	for (;;) {
		if (!fgets(buf, BUFSIZ - 1, stdin)) {
			if (ferror(stdin)) {
				perror("stdin");
				exit(1);
			}
			exit(0);
		}

		char *cmd = strtok(buf, " \t\n\r");

		if((cmd == NULL) || (strcmp(cmd, "") == 0)) {
			PROMPT();
			continue;
		} else if(strcasecmp(cmd, QUITCMD) == 0) {
				exit(0);
		}

		if(!strcasecmp(cmd, GETCMD) == 0) {
			printf("Wrong command %s\n", cmd);
			PROMPT();
			continue;
		}

		// connect to a server
		char *hostname = strtok(NULL, " \t\n\r");
		char *pnum = strtok(NULL, " ");
		char *filename = strtok(NULL, " \t\n\r");

		// just for Debugging, print the URL

		// NEED TO IMPLEMENT HERE
		struct hostent *hostp;
    struct sockaddr_in server;
    int sock;
    char buf[BUFSIZ];
    int bytesread;
		char send_data[BUFSIZ];
		int contentlengh;

    if ((sock = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)) < 0)
		{
        perror("socket");
        exit(1);
    }
		if ((hostp = gethostbyname(hostname)) == 0)
		{
         fprintf(stderr,"%s: unknown host\ncannot connect to server %s %s\n",hostname,hostname,pnum);
				 PROMPT();
				 continue;
		}
		memset((void *) &server, 0, sizeof (server));
		server.sin_family = AF_INET;
		memcpy((void *) &server.sin_addr, hostp->h_addr, hostp->h_length);
		server.sin_port = htons((u_short)atoi(pnum));

		if (connect(sock, (struct sockaddr *)&server, sizeof (server)) < 0)
		{
    		(void) close(sock);
				fprintf(stderr, "connect");
     		exit(1);
		}

		snprintf(send_data, sizeof(send_data), "GET /%s HTTP/1.0\r\nHost: %s\r\nUser-agent: HW1/1.0\r\nID: 20141733\r\nName: Juhyeon Cho\r\nConnection: close\r\n\r\n", filename, hostname);
    if(send(sock, send_data, strlen(send_data), 0)==-1){
        perror("send");
        exit(2);
    }
		char* temp_filename = strtok(filename, "/");
		char save_filename[1024];
		while (temp_filename != NULL)
		{
			strcpy(save_filename, temp_filename);
    	temp_filename = strtok(NULL, "/");
		}
		int i=10;

		if(FindStatus(sock) && (contentlengh=GetContentLength(sock))){
			FILE* file=fopen(save_filename,"wb");
    	int bytes=0;

    	while(bytesread = recv(sock, buf, 1024, 0)){
        if(bytesread==-1){
            perror("recieve");
            exit(3);
        }
				if(file!= NULL)
        	fwrite(buf,1,bytesread,file);
        bytes+=bytesread;
				double percent = ((double)bytes/(double)contentlengh *100);
				if (percent>=i){
        	printf("Current Downloading %d/%d (bytes) %d%%\n",bytes,contentlengh,(int)percent);
					i+=10;
				}
        if(bytes==contentlengh){
					printf("Download Complete: %s, %d/%d\n",save_filename,bytes,contentlengh);
        	break;
				}
    	}

		if(file != NULL)
			fclose(file);
	}
	close(sock);
	PROMPT();
	}
}
