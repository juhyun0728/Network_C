
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <sys/time.h>
#include <sys/stat.h>
#include <netinet/in.h>
#include <netdb.h>
#include <arpa/inet.h>
#include <ctype.h>
#include <errno.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define BUFSIZE 100

void error_handling(char *message);
void display();

#define MAXCLIENT (16)
int clienttcpSocket[MAXCLIENT];	// max 16 clients


int main(int argc, char **argv) {

  int tcpServ_sock;

  struct sockaddr_in tcpServer_addr;
  struct sockaddr_in tcpClient_addr;
  struct sockaddr_in newTcp_addr;

  // initialize the client socket descriptors
  for(int i = 0; i < MAXCLIENT; i++) {
  	clienttcpSocket[i] = 0;	// max 16 clients

  }

  int slot, new_sock;
  socklen_t clnt_len;

  fd_set reads, temps;
  int fd_max;

  char str[BUFSIZE];
  int option = 2;

  char *tcpport = NULL;

  if(argc != 2) {
    printf("Usage : %s <tcpport> \n", argv[0]);
    exit(1);
  }

  tcpport = argv[1];

  display();

  tcpServ_sock = socket(PF_INET, SOCK_STREAM, 0);
  if(tcpServ_sock == -1)
	  error_handling("socket() error");

  memset(&tcpServer_addr, 0 , sizeof(tcpServer_addr));
  tcpServer_addr.sin_family = AF_INET;
  tcpServer_addr.sin_addr.s_addr = htonl(INADDR_ANY);
  tcpServer_addr.sin_port = htons(atoi(tcpport));

  setsockopt(tcpServ_sock, SOL_SOCKET, SO_REUSEADDR, (const void *)&option, sizeof(int));
  if( bind(tcpServ_sock, (struct sockaddr *) &tcpServer_addr, sizeof(tcpServer_addr)) == -1 )
	  error_handling("bind() error");


  if(listen(tcpServ_sock, 5)==-1)
    error_handling("listen() error");

  FD_ZERO(&reads);
  FD_SET(tcpServ_sock, &reads);
  fd_max = tcpServ_sock;

  while(1) {
    int nfound = 0;
    for(int j = 0; j < MAXCLIENT; j++){
      FD_SET(clienttcpSocket[j], &reads); //새로운 소켓들이 에프디 셋에 들어가게 됨
      if (clienttcpSocket[j] > fd_max) fd_max = clienttcpSocket[j];
    }
    temps = reads;

    nfound = select(fd_max+1, &temps, 0, 0, NULL);
    if (nfound < 0) {
			if (errno == EINTR) {
				printf("interrupted system call\n");
				continue;
			}
			perror("select");
			exit(1);
		}
	     if(FD_ISSET(tcpServ_sock, &temps)) {
         int addrlen = sizeof(tcpClient_addr);
         new_sock = accept(tcpServ_sock,(struct sockaddr *)&tcpClient_addr, &addrlen); //이미 연결 요청이 와있으므로 바로 리턴이 됨
         if (new_sock < 0) {
           perror("accept");
           exit(1);
         }
         for(int j = 0; j < MAXCLIENT; j++){
           if(clienttcpSocket[j] == 0) {
             clienttcpSocket[j] = new_sock;
             break;
           }
         }
         printf("connection from host %s, port %d, socket %d\n",inet_ntoa(tcpClient_addr.sin_addr), ntohs(tcpClient_addr.sin_port),new_sock);
  	     FD_CLR(tcpServ_sock, &temps);
	      }
        else {
          for (int fd=0; fd <= MAXCLIENT ; fd++) {
		          if (FD_ISSET(clienttcpSocket[fd], &temps)) {
                int bytesread = read(clienttcpSocket[fd], str, sizeof str - 1);
				        if (bytesread<0) perror("read");
				        if (bytesread<=0) {
                  printf("Connection Closed %d\n",clienttcpSocket[fd]);
                  FD_CLR(clienttcpSocket[fd], &reads);
                  if (close(clienttcpSocket[fd])) perror("close");
                  clienttcpSocket[fd]=0;
                  continue;
                }
                str[bytesread] = '\0';
                for(int i = 0; i < MAXCLIENT; i++) {
                  if (fd!=i && clienttcpSocket[i] != 0){
                    if (write(clienttcpSocket[i], str, bytesread)!=bytesread) //이 부분을 for loop로 바꿔주면 과제 해결 가능
                    perror("echo");
                }
              }
            }
          }
        }
      }//while End
    }//main End

void display() {
	printf("Student ID : 20141733 \n");
	printf("Name : Juhyeon Cho  \n");
}

void error_handling(char *message) {
  fputs(message, stderr);
  fputc('\n', stderr);
  perror("hw3 error");
  exit(1);
}
